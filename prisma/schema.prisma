// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String              @id  @default(uuid())
  nome              String
  email             String              @unique(map: "Users_email_key")
  senha             String
  tipoUser_id       String
  createAt          DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  amontoadorelatado AmontoadoRelatado[]
  notificacao       Notificacao[]
  relatoriocoleta   RelatorioColeta[]
  tipouser          Tipouser            @relation(fields: [tipoUser_id], references: [id], map: "Users_tipoUser_id_fkey")
  feedback          Feedback[]
  pontos            Pontos[]
  resgate           Resgate[]
  configuracao              Configuracao[]

  @@index([tipoUser_id], map: "Users_tipoUser_id_fkey")
}

model Tipouser {
  id       String            @id  @default(uuid())
  tipoUser tipouser_tipoUser
  users    Users[]
}

enum tipouser_tipoUser {
  Empresas_de_Recolha @map("Empresa de Recolha")
  Cidadao_Comum       @map("Cidad√£o Comum")
}

model Empresa {
  id String @id  @default(uuid())
  nomeEmpresa String 
  emailEmpresa String @unique
  estadoEmpresa EstadoEmpresa
  localActuacao Amontoadorelatado_Localidade
  pagamento Pagamento[]
  servico Servico[]
}

enum EstadoEmpresa{
  PRIVADO  
  PUBLICO
}

model AmontoadoRelatado {
  id              String                       @id @default(uuid())
  user_id         String
  desc            String
  foto            String
  latitude        Decimal
  longitude       Decimal
  createAt        DateTime                     @default(now())
  updateAt        DateTime
  quantidade      Amontoadorelatado_Quantidade
  localidade      Amontoadorelatado_Localidade
  categoria       Amontoadorelatado_Categoria
  prioridade      Amontoadorelatado_Prioridade
  status          Amontoadorelatado_Status
  users           Users                        @relation(fields: [user_id], references: [id])
  relatoriocoleta RelatorioColeta[]

  @@index([user_id])
}

enum Relatoriocoleta_StatusColeta {
  RETIRADO
  NAO_RETIRADO
  PENDENTE
}

enum Amontoadorelatado_Quantidade {
  PEQUENO
  MEDIO
  GRANDE
}

enum Amontoadorelatado_Localidade {
  LUANDA
  CAZENGA
  MUSSULO
  MUTAMBA
  ICOLO_E_BENGO
  MAIANGA
  VIANA
  SAMBA
  CACUACO
  BELAS
  RANGEL
  QUICAMA
  CALUMBO
  CAMAMA
  HOJI_YA_HENDA
}

enum Amontoadorelatado_Categoria {
  ORGANICO
  RECICLAVEL
  PERIGOSO
  ELECTRONICO
  OUTROS
}

enum Amontoadorelatado_Prioridade {
  BAIXA
  MEDIA
  ALTA
}

enum Amontoadorelatado_Status {
  RESOLVIDO
  PENDENTE
}

model Notificacao {
  id       String   @id  @default(uuid())
  id_user  String
  titulo   String
  mensagem String
  createAt DateTime @default(now())
  updateAt DateTime
  users    Users    @relation(fields: [id_user], references: [id])

  @@index([id_user])
}

model Feedback {
  id String @id @default(uuid())
  id_user String
  feedback String
  createAt DateTime @default(now())
  tipo_feedack TipoFeedback
  user Users @relation(fields: [id_user], references: [id])
  @@index([id_user])
}

enum TipoFeedback {
  SUGESTAO
  RECLAMACAO
  ELOGIO
}

model RelatorioColeta {
  id               String                       @id  @default(uuid())
  user_id           String
  amontoado_id      String
  dataColeta        DateTime                     @default(now())
  statusColeta      Relatoriocoleta_StatusColeta
  amontoadorelatado AmontoadoRelatado            @relation(fields: [amontoado_id], references: [id])
  users             Users                        @relation(fields: [user_id], references: [id])

  @@index([amontoado_id])
  @@index([user_id])
}

model Pagamento {
  id String @id @default(uuid())
  id_empresa String
  valor Decimal
  metodo_pagamento MetodoPagamento
  status_pagamento StatusPagamento
  createAt DateTime @default(now())
  upadateAt    DateTime
  empresa Empresa @relation(fields: [id_empresa], references: [id])
  @@index([ id_empresa])
}

model Servico {
  id           String   @id @default(uuid())
  id_empresa   String
  titulo       String
  descricao    String
  preco        Decimal
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  empresa      Empresa  @relation(fields: [id_empresa], references: [id])

  @@index([id_empresa])
}


enum MetodoPagamento {
  VISA
  TRASNFERENCIA_BANCARIA
}

enum StatusPagamento {
  PAGO
  NAO_PAGO
}

model Pontos {
  id String @id @default(uuid())
  id_user String
  pontos Int
  createAt DateTime @default(now())
  upadateAt    DateTime
  users Users @relation(fields: [id_user], references: [id])
   @@index([id_user])
}

model Resgate {
  id           String   @id @default(uuid())
  user_id      String
  recompensa_id String
  createAt  DateTime @default(now())
  upadateAt    DateTime
  user       Users      @relation(fields: [user_id], references: [id])
  recompensa Recompensa @relation(fields: [recompensa_id], references: [id])

  @@index([user_id])
  @@index([recompensa_id])
}


model Recompensa {
  id          String   @id @default(uuid())
  nome        String
  descricao   String
  pontosNecessarios Int
  resgates    Resgate[]
}


model Configuracao {
  id        String    @id    @default(uuid())
  acao      String
  data_acao DateTime          @default(now())
  id_user   String
  user      Users             @relation(fields: [id_user], references: [id])
  @@index([id_user])
}
