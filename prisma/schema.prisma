// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id                String              @id @default(uuid())
  nome              String
  email             String              @unique()
  senha             String
  tipoUser_id       String
  iban              String?
  nome_titular      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  amontoadorelatado AmontoadoRelatado[]
  notificacao       Notificacao[]
  relatoriocoleta   RelatorioColeta[]
  tipoUser          TipoUser            @relation(fields: [tipoUser_id], references: [id])
  feedback          Feedback[]
  contactos         Contactos[]
  pontos            Pontos[]
  Pagamento         Pagamento[]
  @@index([tipoUser_id])
}

model TipoUser {
  id    String  @id @default(uuid())
  nome  String
  users Users[]
}

model TipoEmpresa {
  id      String    @id @default(uuid())
  nome    String
  Empresa Empresa[]
}

model Empresa {
  id             String        @id @default(uuid())
  nome           String
  enderecoId     String
  tipoEmpresa_id String
  email          String        @unique
  nif            String
  senha          String
  site           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  endereco       Endereco      @relation(fields: [enderecoId], references: [id])
  tipo_emprea    TipoEmpresa   @relation(fields: [tipoEmpresa_id], references: [id])
  pagamento      Pagamento[]
  agenda         Agenda[]
  notificacao    Notificacao[]
  contactos      Contactos[]
  feedbacks      Feedback[]
}

model Endereco {
  id          String    @id @default(uuid())
  telefone    String
  bairro      String
  provinciaId String
  municipioId String
  provincia   Provincia @relation(fields: [provinciaId], references: [id])
  municipio   Municipio @relation(fields: [municipioId], references: [id])
  Empresa     Empresa[]
}

model AmontoadoRelatado {
  id              String            @id @default(uuid())
  user_id         String
  descricao       String
  latitude        Decimal
  longitude       Decimal
  bairro          String
  createAt        DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  provinciaId     String
  provincia       Provincia         @relation(fields: [provinciaId], references: [id])
  municipioId     String
  municipio       Municipio         @relation(fields: [municipioId], references: [id])
  users           Users             @relation(fields: [user_id], references: [id])
  relatoriocoleta RelatorioColeta[]
  prioridade      Prioridade
//  analiseImagem   AnaliseImagem[]

  @@index([user_id])
}

// model AnaliseImagem {
//   id                    String      @id @default(autoincrement())
//   imageUrl              String
//   labels                Json
//   analysisDate          DateTime @default(now())
//   status                String   @default("pending")
//   createdAt             DateTime @default(now())
//   updatedAt             DateTime @default(now()) @updatedAt
//   amontoadoRelatadoId   String
//   amontoadoRelatado     AmontoadoRelatado  @relation(fields: [amontoadoRelatadoId], references: [id])
// }


enum StatusColeta {
  RETIRADO
  NAO_RETIRADO
  PENDENTE
}

model Provincia {
  id                String              @id @default(uuid())
  nome              String
  municipios        Municipio[]
  Endereco          Endereco[]
  AmontoadoRelatado AmontoadoRelatado[]
}

model Municipio {
  id                String              @id @default(uuid())
  provinciaId       String
  nome              String
  provincia         Provincia           @relation(fields: [provinciaId], references: [id])
  Endereco          Endereco[]
  AmontoadoRelatado AmontoadoRelatado[]
}

enum Prioridade {
  BAIXA
  ALTA
}

model Notificacao {
  id        String   @id @default(uuid())
  userId    String?
  empresaId String?
  titulo    String
  mensagem  String
  createAt  DateTime @default(now())
  updateAt  DateTime
  empresa   Empresa? @relation(fields: [empresaId], references: [id])
  users     Users?   @relation(fields: [userId], references: [id])
}

model Agenda {
  id         String   @id @default(uuid())
  empresaId  String
  start_time DateTime
  end_time   DateTime
  contexto   String
  createAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  empresa    Empresa  @relation(fields: [empresaId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  userId    String
  empresaId String?
  feedback  String
  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  empresa   Empresa?  @relation(fields: [empresaId], references: [id])
  user      Users    @relation(fields: [userId], references: [id])
}

model RelatorioColeta {
  id                String            @id @default(uuid())
  user_id           String
  amontoado_id      String
  dataColeta        DateTime          @default(now())
  statusColeta      StatusColeta      @default(NAO_RETIRADO)
  amontoadorelatado AmontoadoRelatado @relation(fields: [amontoado_id], references: [id])
  users             Users             @relation(fields: [user_id], references: [id])
}

model Pagamento {
  id         String   @id @default(uuid())
  user_id    String?
  empresa_id String?
  valor      Decimal
  user       Users?   @relation(fields: [user_id], references: [id])
  empresa    Empresa? @relation(fields: [empresa_id], references: [id])
  createAt   DateTime @default(now())
  upadateAt  DateTime @updatedAt
}

model Pontos {
  id        String   @id @default(uuid())
  userId    String
  pontos    Int
  createAt  DateTime @default(now())
  upadateAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [id])
}

model Contactos {
  id        String   @id @default(uuid())
  nome      String
  mensagem  String
  userId    String
  empresaId String
  email     String
  createAt  DateTime @default(now())
  upadateAt DateTime @updatedAt
  users     Users    @relation(fields: [userId], references: [id])
  empresa   Empresa  @relation(fields: [empresaId], references: [id])
}
